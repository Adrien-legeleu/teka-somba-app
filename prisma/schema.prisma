generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String      @id @default(uuid())
  email       String      @unique
  password    String
  name        String
  prenom        String
    premiumPurchase PremiumPurchase[]

  phone       String
  avatar      String? 
  helpRequests HelpRequest[]
  walletTransaction WalletTransaction[]
credit Int @default(0)

  city        String
  age         Int? 
  isAdmin     Boolean     @default(false)
  notifications Notification[]
  favorites   Favorite[]
  // wallet   Wallet[]
  // purchase   Purchase[]
  ads         Ad[]
  // paymentsAsBuyer Payment[] @relation("PaymentsAsBuyer")
  messagesSent     Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
  identityCardUrl   String?      // URL/photo de la carte d'identité
  isVerified        Boolean  @default(false)   // Validé par l'admin ?
  isRejected        Boolean  @default(false)
  resetToken          String?
  resetTokenExpiry    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Ad {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Int                                       // prix en centimes (si devise unique) ou Decimal pour plus de précision
  location    String?                                   // Adresse ou ville (texte saisi ou fourni par Mapbox)
  lat         Float?                                    // Latitude GPS
  lng         Float?                                    // Longitude GPS
  images      Json? 
  boostType   String? // exemple: "VIP", "Hebdo", "Journalier"
boostUntil  DateTime?
isVip Boolean @default(false) // Indique si l'annonce est actuellement VIP
    premiumPurchase PremiumPurchase[]
  isDon  Boolean @default(false)
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category  @relation("AdCategory", fields: [categoryId], references: [id])
  fields      AdField[] 
  favorites   Favorite[]            // <--- AJOUT
  messages    Message[]             // <--- AJOUT
  // payments    Payment[]             // <--- AJOUT
}

model AdField {
  id               String   @id @default(uuid())
  adId             String
  ad               Ad       @relation(fields: [adId], references: [id],  onDelete: Cascade)
  categoryFieldId  String
  categoryField    CategoryField @relation(fields: [categoryFieldId], references: [id])
  value            Json
}

enum AdStatus {
  ACTIVE
  PAUSED
  SOLD
  DELETED
}

model Category {
  id        String      @id @default(uuid())
  name      String
  parentId  String?
  parent    Category?   @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[]  @relation("CategoryParent")
  fields    CategoryField[]
  ads       Ad[]        @relation("AdCategory")
}

model CategoryField {
  id          String    @id @default(uuid())
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  name        String
  type        String
  required    Boolean   @default(false)
  options     Json?
  adFields    AdField[]          // <--- AJOUT : Relation inverse
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ad        Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId      String
  createdAt DateTime @default(now())

  @@unique([userId, adId])
}

model Message {
  id        String   @id @default(uuid())
  ad        Ad     @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId      String
  sender    User     @relation("MessagesSent", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId String
  content   String
  isRead    Boolean  @default(false)
  deletedBySender   Boolean  @default(false)
  deletedByReceiver Boolean  @default(false)
  createdAt DateTime @default(now())
    @@index([adId, senderId, receiverId])

}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  link      String?  
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model WalletTransaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Int      // Montant en crédits (positif ou négatif)
  type      TransactionType
  metadata  String?  // Par exemple "Paiement Orange Money" ou "Achat Boost"
  createdAt DateTime @default(now())
}

enum TransactionType {
  RECHARGE
  PURCHASE
}

model PremiumOffer {
  id          String   @id @default(uuid())
  title       String
  description String
  premiumPurchase PremiumPurchase[]
  price       Int      // en crédits
  duration    Int?     // en jours (pour Boost/VIP)
  type        OfferType
}

enum OfferType {
  BOOST_HEBDO
  BOOST_JOURNALIER
  VIP
}

model HelpRequest {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  name      String
  subject String
  email     String
  message   String
  status    HelpStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum HelpStatus {
  PENDING
  TRAITED
  CLOSED
}

model PremiumPurchase {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  offer     PremiumOffer @relation(fields: [offerId], references: [id])
  offerId   String
  ad        Ad       @relation(fields: [adId], references: [id])
  adId      String
  createdAt DateTime @default(now())
}
